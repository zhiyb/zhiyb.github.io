<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "xhtml1-transitional.dtd">
<?xml-stylesheet type="text/xsl" href="mathml.xsl"?><html xmlns="http://www.w3.org/1999/xhtml" xmlns:pref="http://www.w3.org/2002/Math/preference" pref:renderer="mathplayer-dl"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /><link rel="stylesheet" type="text/css" href="opengl-man.css" /><title>glVertexAttribFormat - OpenGL 4 Reference Pages</title><meta name="generator" content="DocBook XSL Stylesheets V1.78.1" /></head><body><div class="refentry"><a id="glVertexAttribFormat"></a><div class="titlepage"></div><div class="refnamediv"><h2>Name</h2><p>glVertexAttribFormat — specify the organization of vertex arrays</p></div><div class="refsynopsisdiv"><h2>C Specification</h2><div class="funcsynopsis"><table border="0" class="funcprototype-table" summary="Function synopsis" style="cellspacing: 0; cellpadding: 0;"><tr><td><code class="funcdef">void <strong class="fsfunc">glVertexAttribFormat</strong>(</code></td><td>GLuint <var class="pdparam">attribindex</var>, </td></tr><tr><td> </td><td>GLint <var class="pdparam">size</var>, </td></tr><tr><td> </td><td>GLenum <var class="pdparam">type</var>, </td></tr><tr><td> </td><td>GLboolean <var class="pdparam">normalized</var>, </td></tr><tr><td> </td><td>GLuint <var class="pdparam">relativeoffset</var><code>)</code>;</td></tr></table><div class="funcprototype-spacer"> </div></div><div class="funcsynopsis"><table border="0" class="funcprototype-table" summary="Function synopsis" style="cellspacing: 0; cellpadding: 0;"><tr><td><code class="funcdef">void <strong class="fsfunc">glVertexAttribIFormat</strong>(</code></td><td>GLuint <var class="pdparam">attribindex</var>, </td></tr><tr><td> </td><td>GLint <var class="pdparam">size</var>, </td></tr><tr><td> </td><td>GLenum <var class="pdparam">type</var>, </td></tr><tr><td> </td><td>GLuint <var class="pdparam">relativeoffset</var><code>)</code>;</td></tr></table><div class="funcprototype-spacer"> </div></div><div class="funcsynopsis"><table border="0" class="funcprototype-table" summary="Function synopsis" style="cellspacing: 0; cellpadding: 0;"><tr><td><code class="funcdef">void <strong class="fsfunc">glVertexAttribLFormat</strong>(</code></td><td>GLuint <var class="pdparam">attribindex</var>, </td></tr><tr><td> </td><td>GLint <var class="pdparam">size</var>, </td></tr><tr><td> </td><td>GLenum <var class="pdparam">type</var>, </td></tr><tr><td> </td><td>GLuint <var class="pdparam">relativeoffset</var><code>)</code>;</td></tr></table><div class="funcprototype-spacer"> </div></div></div><div class="refsect1"><a id="parameters"></a><h2>Parameters</h2><div class="variablelist"><dl class="variablelist"><dt><span class="term"><em class="parameter"><code>attribindex</code></em></span></dt><dd><p>
                    The generic vertex attribute array being described.
                </p></dd><dt><span class="term"><em class="parameter"><code>size</code></em></span></dt><dd><p>
                    The number of values per vertex that are stored in the array.
                </p></dd><dt><span class="term"><em class="parameter"><code>type</code></em></span></dt><dd><p>
                    The type of the data stored in the array.
                </p></dd><dt><span class="term"><em class="parameter"><code>normalized</code></em></span></dt><dd><p>
                    The distance between elements within the buffer.
                </p></dd><dt><span class="term"><em class="parameter"><code>relativeoffset</code></em></span></dt><dd><p>
                    The distance between elements within the buffer.
                </p></dd></dl></div></div><div class="refsect1"><a id="description"></a><h2>Description</h2><p>
            <code class="function">glVertexAttribFormat</code>, <code class="function">glVertexAttribIFormat</code> and
            <code class="function">glVertexAttribLFormat</code> specify the organization of data in vertex arrays.
            <em class="parameter"><code>attribindex</code></em> specifies the index of the generic vertex attribute
            array whose data layout is being described, and must be less
            than the value of <code class="constant">GL_MAX_VERTEX_ATTRIBS</code>.
        </p><p>
            <em class="parameter"><code>size</code></em> determines the number of components per vertex are allocated
            to the specifed attribute and must be 1, 2, 3 or 4. <em class="parameter"><code>type</code></em> indicates
            the type of the data. If <em class="parameter"><code>type</code></em> is one of <code class="constant">GL_BYTE</code>,
            <code class="constant">GL_SHORT</code>, <code class="constant">GL_INT</code>, <code class="constant">GL_FIXED</code>,
            <code class="constant">GL_FLOAT</code>, <code class="constant">GL_HALF_FLOAT</code>, and
            <code class="constant">GL_DOUBLE</code> indicate types <code class="code">GLbyte</code>, <code class="code">GLshort</code>,
            <code class="code">GLint</code>, <code class="code">GLfixed</code>, <code class="code">GLfloat</code>, <code class="code">GLhalf</code>, and
            <code class="code">GLdouble</code>, respectively; the values <code class="constant">GL_UNSIGNED_BYTE</code>,
            <code class="constant">GL_UNSIGNED_SHORT</code>, and <code class="constant">GL_UNSIGNED_INT</code> indicate types
            <code class="code">GLubyte</code>, <code class="code">GLushort</code>, and <code class="code">GLuint</code>,
            respectively; the values <code class="constant">GL_INT_2_10_10_10_REV</code> and
            <code class="constant">GL_UNSIGNED_INT_2_10_10_10_REV</code> indicating respectively four signed or
            unsigned elements packed into a single <code class="code">GLuint</code>; and the value
            <code class="constant">GL_UNSIGNED_INT_10F_11F_11F_REV</code> indicating three floating point values
            packed into a single <code class="code">GLuint</code>.
        </p><p>
            <code class="function">glVertexAttribLFormat</code> is used to specify layout for
            data associated with a generic attribute variable declared as 64-bit double precision
            components. For <code class="function">glVertexAttribLFormat</code>, <em class="parameter"><code>type</code></em>
            must be <code class="constant">GL_DOUBLE</code>. In contrast to <code class="function">glVertexAttribFormat</code>,
            which will cause data declared as <code class="constant">GL_DOUBLE</code> to be converted to 32-bit
            representation, <code class="function">glVertexAttribLFormat</code> causes such data to be left
            in its natural, 64-bit representation.
        </p><p>
            For <code class="function">glVertexAttribFormat</code>, if <em class="parameter"><code>normalized</code></em> is
            <code class="constant">GL_TRUE</code>, then integer data is normalized to the range [-1, 1] or
            [0, 1] if it is signed or unsigned, respectively. If <em class="parameter"><code>noramlized</code></em> is
            <code class="constant">GL_FALSE</code> then integer data is directly converted to floating point.
        </p><p>
            <em class="parameter"><code>relativeoffset</code></em> is the offset, measured in basic machine units
            of the first element relative to the start of the vertex buffer binding this attribute
            fetches from.
        </p><p>
            <code class="function">glVertexAttribFormat</code> should be used to describe vertex attribute
            layout for floating-point vertex attributes, <code class="function">glVertexAttribIFormat</code>
            should be used to describe vertex attribute layout for integer vertex attribute
            and <code class="function">glVertexAttribLFormat</code> should be used to describe the layout
            for 64-bit vertex attributes. Data for an array specified by
            <code class="function">glVertexAttribIFormat</code> will always be left as integer values;
            such data are referred to as pure integers.
        </p></div><div class="refsect1"><a id="notes"></a><h2>Notes</h2><p>
            <code class="constant">GL_UNSIGNED_INT_10F_11F_11F_REV</code> is accepted for <em class="parameter"><code>type</code></em>
            only if the GL version is 4.4 or higher.
        </p></div><div class="refsect1"><a id="errors"></a><h2>Errors</h2><p>
            <code class="constant">GL_INVAILD_VALUE</code> is generated if <em class="parameter"><code>attribindex</code></em> is greater than
            or equal to the value of <code class="constant">GL_MAX_VERTEX_ATTRIBS</code>.
        </p><p>
            <code class="constant">GL_INVALID_VALUE</code> is generated if <em class="parameter"><code>size</code></em> is not
            one of the accepted values.
        </p><p>
            <code class="constant">GL_INVALID_VALUE</code> is generated if <em class="parameter"><code>relativeoffset</code></em> is greater
            than the value of <code class="constant">GL_MAX_VERTEX_ATTRIB_RELATIVE_OFFSET</code>.
        </p><p>
            <code class="constant">GL_INVALID_ENUM</code> is generated if <em class="parameter"><code>type</code></em> is not
            one of the accepted tokens.
        </p><p>
            <code class="constant">GL_INVALID_OPERATION</code> is generated if no vertex array object is bound.
        </p></div><div class="refsect1"><a id="associatedgets"></a><h2>Associated Gets</h2><p>
            <a class="citerefentry" href="glGet.xml"><span class="citerefentry"><span class="refentrytitle">glGet</span></span></a> with arguments <code class="constant">GL_MAX_VERTEX_ATTRIB_BINDINGS</code>,
            or <code class="constant">GL_MAX_VERTEX_ATTRIB_RELATIVE_OFFSET</code>.
        </p><p>
            <a class="citerefentry" href="glGetVertexAttrib.xml"><span class="citerefentry"><span class="refentrytitle">glGetVertexAttrib</span></span></a> with argument <code class="constant">GL_VERTEX_ATTRIB_RELATIVE_OFFSET</code>.
        </p></div><div class="refsect1"><a id="seealso"></a><h2>See Also</h2><p>
            <a class="citerefentry" href="glBindVertexBuffer.xml"><span class="citerefentry"><span class="refentrytitle">glBindVertexBuffer</span></span></a>,
            <a class="citerefentry" href="glVertexAttribBinding.xml"><span class="citerefentry"><span class="refentrytitle">glVertexAttribBinding</span></span></a>,
            <a class="citerefentry" href="glVertexAttribPointer.xml"><span class="citerefentry"><span class="refentrytitle">glVertexAttribPointer</span></span></a>,
            <a class="citerefentry" href="glVertexBindingDivisor.xml"><span class="citerefentry"><span class="refentrytitle">glVertexBindingDivisor</span></span></a>,
            <a class="citerefentry" href="glVertexAttribPointer.xml"><span class="citerefentry"><span class="refentrytitle">glVertexAttribPointer</span></span></a>.
        </p></div><div class="refsect1"><a id="Copyright"></a><h2>Copyright</h2><p>
            Copyright <span class="trademark"></span>© 2013 Khronos Group.
            This material may be distributed subject to the terms and conditions set forth in
            the Open Publication License, v 1.0, 8 June 1999.
            <a class="ulink" href="http://opencontent.org/openpub/" target="_top">http://opencontent.org/openpub/</a>.
        </p></div></div></body></html>
