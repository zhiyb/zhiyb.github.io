<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "xhtml1-transitional.dtd">
<?xml-stylesheet type="text/xsl" href="mathml.xsl"?><html xmlns="http://www.w3.org/1999/xhtml" xmlns:pref="http://www.w3.org/2002/Math/preference" pref:renderer="mathplayer-dl"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /><link rel="stylesheet" type="text/css" href="opengl-man.css" /><title>glBeginQueryIndexed, glEndQueryIndexed - OpenGL 4 Reference Pages</title><meta name="generator" content="DocBook XSL Stylesheets V1.78.1" /></head><body><div class="refentry"><a id="glBeginQueryIndexed"></a><div class="titlepage"></div><div class="refnamediv"><h2>Name</h2><p>glBeginQueryIndexed, glEndQueryIndexed — delimit the boundaries of a query object on an indexed target</p></div><div class="refsynopsisdiv"><h2>C Specification</h2><div class="funcsynopsis"><table border="0" class="funcprototype-table" summary="Function synopsis" style="cellspacing: 0; cellpadding: 0;"><tr><td><code class="funcdef">void <strong class="fsfunc">glBeginQueryIndexed</strong>(</code></td><td>GLenum <var class="pdparam">target</var>, </td></tr><tr><td> </td><td>GLuint <var class="pdparam">index</var>, </td></tr><tr><td> </td><td>GLuint <var class="pdparam">id</var><code>)</code>;</td></tr></table><div class="funcprototype-spacer"> </div></div><div class="funcsynopsis"><table border="0" class="funcprototype-table" summary="Function synopsis" style="cellspacing: 0; cellpadding: 0;"><tr><td><code class="funcdef">void <strong class="fsfunc">glEndQueryIndexed</strong>(</code></td><td>GLenum <var class="pdparam">target</var>, </td></tr><tr><td> </td><td>GLuint <var class="pdparam">index</var><code>)</code>;</td></tr></table><div class="funcprototype-spacer"> </div></div></div><div class="refsect1"><a id="parameters"></a><h2>Parameters for <code class="function">glBeginQueryIndexed</code></h2><div class="variablelist"><dl class="variablelist"><dt><span class="term"><em class="parameter"><code>target</code></em></span></dt><dd><p>
                    Specifies the target type of query object established between
                    <code class="function">glBeginQueryIndexed</code> and the subsequent <a class="citerefentry" href="glEndQueryIndexed.xml"><span class="citerefentry"><span class="refentrytitle">glEndQueryIndexed</span></span></a>.
                    The symbolic constant must be one of <code class="constant">GL_SAMPLES_PASSED</code>, <code class="constant">GL_ANY_SAMPLES_PASSED</code>,
                    <code class="constant">GL_PRIMITIVES_GENERATED</code>, <code class="constant">GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN</code>, or
                    <code class="constant">GL_TIME_ELAPSED</code>.
                </p></dd><dt><span class="term"><em class="parameter"><code>index</code></em></span></dt><dd><p>
                    Specifies the index of the query target upon which to begin the query.
                </p></dd><dt><span class="term"><em class="parameter"><code>id</code></em></span></dt><dd><p>
                    Specifies the name of a query object.
                </p></dd></dl></div></div><div class="refsect1"><a id="parameters2"></a><h2>Parameters for <code class="function">glEndQueryIndexed</code></h2><div class="variablelist"><dl class="variablelist"><dt><span class="term"><em class="parameter"><code>target</code></em></span></dt><dd><p>
                    Specifies the target type of query object to be concluded.
                    The symbolic constant must be one of <code class="constant">GL_SAMPLES_PASSED</code>, <code class="constant">GL_ANY_SAMPLES_PASSED</code>,
                    <code class="constant">GL_PRIMITIVES_GENERATED</code>, <code class="constant">GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN</code>, or
                    <code class="constant">GL_TIME_ELAPSED</code>.
                </p></dd><dt><span class="term"><em class="parameter"><code>index</code></em></span></dt><dd><p>
                    Specifies the index of the query target upon which to end the query.
                </p></dd></dl></div></div><div class="refsect1"><a id="description"></a><h2>Description</h2><p>
            <code class="function">glBeginQueryIndexed</code> and <a class="citerefentry" href="glEndQueryIndexed.xml"><span class="citerefentry"><span class="refentrytitle">glEndQueryIndexed</span></span></a> delimit the
            boundaries of a query object.  <em class="parameter"><code>query</code></em> must be a name previously returned from a call to
            <a class="citerefentry" href="glGenQueries.xml"><span class="citerefentry"><span class="refentrytitle">glGenQueries</span></span></a>. If a query object with name <em class="parameter"><code>id</code></em>
            does not yet exist it is created with the type determined by <em class="parameter"><code>target</code></em>. <em class="parameter"><code>target</code></em> must
            be one of <code class="constant">GL_SAMPLES_PASSED</code>, <code class="constant">GL_ANY_SAMPLES_PASSED</code>, <code class="constant">GL_PRIMITIVES_GENERATED</code>,
            <code class="constant">GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN</code>, or <code class="constant">GL_TIME_ELAPSED</code>. The behavior of the query
            object depends on its type and is as follows.
        </p><p>
            <em class="parameter"><code>index</code></em> specifies the index of the query target and must be between a <em class="parameter"><code>target</code></em>-specific
            maximum.
        </p><p>
            If <em class="parameter"><code>target</code></em> is <code class="constant">GL_SAMPLES_PASSED</code>, <em class="parameter"><code>id</code></em> must be an unused name,
            or the name of an existing occlusion query object.
            When <code class="function">glBeginQueryIndexed</code> is executed, the query object's samples-passed counter is reset to 0.  Subsequent
            rendering will increment the counter for every sample that passes the depth test.  If the value of <code class="constant">GL_SAMPLE_BUFFERS</code>
            is 0, then the samples-passed count is incremented by 1 for each fragment. If the value of <code class="constant">GL_SAMPLE_BUFFERS</code>
            is 1, then the samples-passed count is incremented by the number of samples whose coverage bit is set. However, implementations, at their
            discression may instead increase the samples-passed count by the value of <code class="constant">GL_SAMPLES</code> if any sample in the fragment
            is covered. When <code class="function">glEndQueryIndexed</code>
            is executed, the samples-passed counter is assigned to the query object's result value.  This value can be queried by
            calling <a class="citerefentry" href="glGetQueryObject.xml"><span class="citerefentry"><span class="refentrytitle">glGetQueryObject</span></span></a> with <em class="parameter"><code>pname</code></em>
            <code class="constant">GL_QUERY_RESULT</code>.
            When <em class="parameter"><code>target</code></em> is <code class="constant">GL_SAMPLES_PASSED</code>, <em class="parameter"><code>index</code></em> must be zero.
        </p><p>
            If <em class="parameter"><code>target</code></em> is <code class="constant">GL_ANY_SAMPLES_PASSED</code>, <em class="parameter"><code>id</code></em> must be an unused name,
            or the name of an existing boolean occlusion query object.
            When <code class="function">glBeginQueryIndexed</code> is executed, the query object's samples-passed flag is reset to <code class="constant">GL_FALSE</code>.
            Subsequent rendering causes the flag to be set to <code class="constant">GL_TRUE</code> if any sample passes the depth test.  When
            <code class="function">glEndQueryIndexed</code> is executed, the samples-passed flag is assigned to the query object's result value.  This value can
            be queried by calling <a class="citerefentry" href="glGetQueryObject.xml"><span class="citerefentry"><span class="refentrytitle">glGetQueryObject</span></span></a> with <em class="parameter"><code>pname</code></em>
            <code class="constant">GL_QUERY_RESULT</code>.
            When <em class="parameter"><code>target</code></em> is <code class="constant">GL_ANY_SAMPLES_PASSED</code>, <em class="parameter"><code>index</code></em> must be zero.
        </p><p>
            If <em class="parameter"><code>target</code></em> is <code class="constant">GL_PRIMITIVES_GENERATED</code>, <em class="parameter"><code>id</code></em> must be an unused
            name, or the name of an existing primitive query object previously bound to the <code class="constant">GL_PRIMITIVES_GENERATED</code> query binding.
            When <code class="function">glBeginQueryIndexed</code> is executed, the query object's primitives-generated counter is reset to 0.  Subsequent
            rendering will increment the counter once for every vertex that is emitted from the geometry shader to the stream given by <em class="parameter"><code>index</code></em>,
            or from the vertex shader if <em class="parameter"><code>index</code></em> is zero and no geometry shader is present.
            When <code class="function">glEndQueryIndexed</code> is executed, the primitives-generated counter for stream <em class="parameter"><code>index</code></em> is assigned to
            the query object's result value.  This value can be queried by calling <a class="citerefentry" href="glGetQueryObject.xml"><span class="citerefentry"><span class="refentrytitle">glGetQueryObject</span></span></a>
            with <em class="parameter"><code>pname</code></em> <code class="constant">GL_QUERY_RESULT</code>.
            When <em class="parameter"><code>target</code></em> is <code class="constant">GL_PRIMITIVES_GENERATED</code>, <em class="parameter"><code>index</code></em> must be
            less than the value of <code class="constant">GL_MAX_VERTEX_STREAMS</code>.
        </p><p>
            If <em class="parameter"><code>target</code></em> is <code class="constant">GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN</code>, <em class="parameter"><code>id</code></em> must be
            an unused name, or the name of an existing primitive query object previously bound to the <code class="constant">GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN</code>
            query binding. When <code class="function">glBeginQueryIndexed</code> is executed, the query object's primitives-written counter for the stream specified by
            <em class="parameter"><code>index</code></em> is reset to 0.  Subsequent rendering will increment the counter once for every vertex that is written into the bound
            transform feedback buffer(s) for stream <em class="parameter"><code>index</code></em>.  If transform feedback
            mode is not activated between the call to <code class="function">glBeginQueryIndexed</code> and <code class="function">glEndQueryIndexed</code>, the counter will not be
            incremented.  When <code class="function">glEndQueryIndexed</code> is executed, the primitives-written counter for stream <em class="parameter"><code>index</code></em> is assigned to
            the query object's result value.  This value can be queried by calling <a class="citerefentry" href="glGetQueryObject.xml"><span class="citerefentry"><span class="refentrytitle">glGetQueryObject</span></span></a> with <em class="parameter"><code>pname</code></em>
            <code class="constant">GL_QUERY_RESULT</code>.
            When <em class="parameter"><code>target</code></em> is <code class="constant">GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN</code>, <em class="parameter"><code>index</code></em> must be
            less than the value of <code class="constant">GL_MAX_VERTEX_STREAMS</code>.
        </p><p>
            If <em class="parameter"><code>target</code></em> is <code class="constant">GL_TIME_ELAPSED</code>, <em class="parameter"><code>id</code></em> must be
            an unused name, or the name of an existing timer query object previously bound to the <code class="constant">GL_TIME_ELAPSED</code>
            query binding. When <code class="function">glBeginQueryIndexed</code> is executed, the query object's time counter is reset to 0.  When <code class="function">glEndQueryIndexed</code>
            is executed, the elapsed server time that has passed since the call to <code class="function">glBeginQueryIndexed</code> is written into the query object's
            time counter.  This value can be queried by calling <a class="citerefentry" href="glGetQueryObject.xml"><span class="citerefentry"><span class="refentrytitle">glGetQueryObject</span></span></a> with <em class="parameter"><code>pname</code></em>
            <code class="constant">GL_QUERY_RESULT</code>.
            When <em class="parameter"><code>target</code></em> is <code class="constant">GL_TIME_ELAPSED</code>, <em class="parameter"><code>index</code></em> must be zero.
        </p><p>
            Querying the <code class="constant">GL_QUERY_RESULT</code> implicitly flushes the GL pipeline until the rendering delimited by the
            query object has completed and the result is available.  <code class="constant">GL_QUERY_RESULT_AVAILABLE</code> can be queried to
            determine if the result is immediately available or if the rendering is not yet complete.
        </p></div><div class="refsect1"><a id="notes"></a><h2>Notes</h2><p>
            If the query target's count exceeds the maximum value representable in the number of available bits, as reported by
            <a class="citerefentry" href="glGetQueryiv.xml"><span class="citerefentry"><span class="refentrytitle">glGetQueryiv</span></span></a> with <em class="parameter"><code>target</code></em> set to the
            appropriate query target and <em class="parameter"><code>pname</code></em>
            <code class="constant">GL_QUERY_COUNTER_BITS</code>, the count becomes undefined.
        </p><p>
            An implementation may support 0 bits in its counter, in which case query results are always undefined
            and essentially useless.
        </p><p>
            When <code class="constant">GL_SAMPLE_BUFFERS</code> is 0, the samples-passed counter of an occlusion query will increment once for each
            fragment that passes the depth test.  When <code class="constant">GL_SAMPLE_BUFFERS</code> is 1, an implementation may either increment
            the samples-passed counter individually for each sample of a fragment that passes the depth test, or it may choose to increment
            the counter for all samples of a fragment if any one of them passes the depth test.
        </p><p>
            Calling <a class="citerefentry" href="glBeginQuery.xml"><span class="citerefentry"><span class="refentrytitle">glBeginQuery</span></span></a> or
            <a class="citerefentry" href="glEndQuery.xml"><span class="citerefentry"><span class="refentrytitle">glEndQuery</span></span></a> is equivalent to
            calling <a class="citerefentry" href="glBeginQueryIndexed.xml"><span class="citerefentry"><span class="refentrytitle">glBeginQueryIndexed</span></span></a> or
            <a class="citerefentry" href="glEndQueryIndexed.xml"><span class="citerefentry"><span class="refentrytitle">glEndQueryIndexed</span></span></a> with
            <em class="parameter"><code>index</code></em> set to zero, respectively.
        </p></div><div class="refsect1"><a id="errors"></a><h2>Errors</h2><p>
            <code class="constant">GL_INVALID_ENUM</code> is generated if <em class="parameter"><code>target</code></em> is not one of the accepted tokens.
        </p><p>
            <code class="constant">GL_INVALID_VALUE</code> is generated if <em class="parameter"><code>index</code></em> is greater than the
            query target-specific maximum.
        </p><p>
            <code class="constant">GL_INVALID_OPERATION</code> is generated if <code class="function">glBeginQueryIndexed</code> is executed while
            a query object of the same <em class="parameter"><code>target</code></em> is already active.
        </p><p>
            <code class="constant">GL_INVALID_OPERATION</code> is generated if <a class="citerefentry" href="glEndQueryIndexed.xml"><span class="citerefentry"><span class="refentrytitle">glEndQueryIndexed</span></span></a>
            is executed when a query object of the same <em class="parameter"><code>target</code></em> is not active.
        </p><p>
            <code class="constant">GL_INVALID_OPERATION</code> is generated if <em class="parameter"><code>id</code></em> is 0.
        </p><p>
            <code class="constant">GL_INVALID_OPERATION</code> is generated if <em class="parameter"><code>id</code></em> is the name of an already active query object.
        </p><p>
            <code class="constant">GL_INVALID_OPERATION</code> is generated if <em class="parameter"><code>id</code></em> refers to an existing query object whose type
            does not does not match <em class="parameter"><code>target</code></em>.
        </p></div><div class="refsect1"><a id="seealso"></a><h2>See Also</h2><p>
            <a class="citerefentry" href="glDeleteQueries.xml"><span class="citerefentry"><span class="refentrytitle">glDeleteQueries</span></span></a>,
            <a class="citerefentry" href="glBeginQuery.xml"><span class="citerefentry"><span class="refentrytitle">glBeginQuery</span></span></a>,
            <a class="citerefentry" href="glEndQuery.xml"><span class="citerefentry"><span class="refentrytitle">glEndQuery</span></span></a>,
            <a class="citerefentry" href="glGenQueries.xml"><span class="citerefentry"><span class="refentrytitle">glGenQueries</span></span></a>,
            <a class="citerefentry" href="glGetQueryiv.xml"><span class="citerefentry"><span class="refentrytitle">glGetQueryiv</span></span></a>,
            <a class="citerefentry" href="glGetQueryObject.xml"><span class="citerefentry"><span class="refentrytitle">glGetQueryObject</span></span></a>,
            <a class="citerefentry" href="glIsQuery.xml"><span class="citerefentry"><span class="refentrytitle">glIsQuery</span></span></a>
        </p></div><div class="refsect1"><a id="Copyright"></a><h2>Copyright</h2><p>
            Copyright <span class="trademark"></span>© 2010-2013 Khronos Group.
            This material may be distributed subject to the terms and conditions set forth in
            the Open Publication License, v 1.0, 8 June 1999.
            <a class="ulink" href="http://opencontent.org/openpub/" target="_top">http://opencontent.org/openpub/</a>.
        </p></div></div></body></html>
