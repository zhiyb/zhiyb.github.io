<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "xhtml1-transitional.dtd">
<?xml-stylesheet type="text/xsl" href="mathml.xsl"?><html xmlns="http://www.w3.org/1999/xhtml" xmlns:pref="http://www.w3.org/2002/Math/preference" pref:renderer="mathplayer-dl"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /><link rel="stylesheet" type="text/css" href="opengl-man.css" /><title>glGetFramebufferParameter - OpenGL 4 Reference Pages</title><meta name="generator" content="DocBook XSL Stylesheets V1.78.1" /></head><body><div class="refentry"><a id="glGetFramebufferParameter"></a><div class="titlepage"></div><div class="refnamediv"><h2>Name</h2><p>glGetFramebufferParameter — retrieve a named parameter from a framebuffer</p></div><div class="refsynopsisdiv"><h2>C Specification</h2><div class="funcsynopsis"><table border="0" class="funcprototype-table" summary="Function synopsis" style="cellspacing: 0; cellpadding: 0;"><tr><td><code class="funcdef">void <strong class="fsfunc">glGetFramebufferParameteriv</strong>(</code></td><td>GLenum <var class="pdparam">target</var>, </td></tr><tr><td> </td><td>GLenum <var class="pdparam">pname</var>, </td></tr><tr><td> </td><td>GLint * <var class="pdparam">params</var><code>)</code>;</td></tr></table><div class="funcprototype-spacer"> </div></div></div><div class="refsect1"><a id="parameters"></a><h2>Parameters</h2><div class="variablelist"><dl class="variablelist"><dt><span class="term"><em class="parameter"><code>target</code></em></span></dt><dd><p>
                    The target of the operation, which must be <code class="constant">GL_READ_FRAMEBUFFER</code>,
                    <code class="constant">GL_DRAW_FRAMEBUFFER</code> or <code class="constant">GL_FRAMEBUFFER</code>.
                </p></dd><dt><span class="term"><em class="parameter"><code>pname</code></em></span></dt><dd><p>
                    A token indicating the parameter to be retrieved.
                </p></dd><dt><span class="term"><em class="parameter"><code>params</code></em></span></dt><dd><p>
                    The address of a variable to receive the value of the parameter named <em class="parameter"><code>pname</code></em>.
                </p></dd></dl></div></div><div class="refsect1"><a id="description"></a><h2>Description</h2><p>
            <code class="function">glGetFramebufferParameter</code> retrieves the current value of the parameter
            named <em class="parameter"><code>pname</code></em> from the framebuffer bound to <em class="parameter"><code>target</code></em>.
            <em class="parameter"><code>target</code></em> must be <code class="constant">GL_READ_FRAMEBFUFFER</code>,
            <code class="constant">GL_DRAW_FRAMEBUFFER</code> or <code class="constant">GL_FRAMEBUFFER</code>. The
            token <code class="constant">GL_FRAMEBUFFER</code> is treated as <code class="constant">GL_DRAW_FRAMEBUFFER</code>.
            A non-default framebuffer must be bound to <em class="parameter"><code>target</code></em>.
        </p><p>
            <em class="parameter"><code>pname</code></em> specifies the parameter to be retrieved. The values retrieved from
            the framebuffer are written into the variable whose address is given by <em class="parameter"><code>params</code></em>.
            The following symbols are accepted in <em class="parameter"><code>pname</code></em>:
        </p><div class="variablelist"><dl class="variablelist"><dt><span class="term"><code class="constant">GL_FRAMEBUFFER_DEFAULT_WIDTH</code></span></dt><dd><p>
                        The value of <code class="constant">GL_FRAMEBUFFER_DEFAULT_WIDTH</code> for the framebuffer is written to the
                        single integer variable whose address is given by <em class="parameter"><code>params</code></em>.
                    </p></dd><dt><span class="term"><code class="constant">GL_FRAMEBUFFER_DEFAULT_HEIGHT</code></span></dt><dd><p>
                        The value of <code class="constant">GL_FRAMEBUFFER_DEFAULT_HEIGHT</code> for the framebuffer is written to the
                        single integer variable whose address is given by <em class="parameter"><code>params</code></em>.
                    </p></dd><dt><span class="term"><code class="constant">GL_FRAMEBUFFER_DEFAULT_LAYERS</code></span></dt><dd><p>
                        The value of <code class="constant">GL_FRAMEBUFFER_DEFAULT_LAYERS</code> for the framebuffer is written to the
                        single integer variable whose address is given by <em class="parameter"><code>params</code></em>.
                    </p></dd><dt><span class="term"><code class="constant">GL_FRAMEBUFFER_DEFAULT_SAMPLES</code></span></dt><dd><p>
                        The value of <code class="constant">GL_FRAMEBUFFER_DEFAULT_SAMPLES</code> for the framebuffer is written to the
                        single integer variable whose address is given by <em class="parameter"><code>params</code></em>.
                    </p></dd><dt><span class="term"><code class="constant">GL_FRAMEBUFFER_DEFAULT_FIXED_SAMPLE_LOCATIONS</code></span></dt><dd><p>
                        If the value of <code class="constant">GL_FRAMEBUFFER_DEFAULT_FIXED_SAMPLE_LOCATIONS</code> for the framebuffer is <code class="constant">GL_TRUE</code>
                        then the single integer variable whose address is in <em class="parameter"><code>params</code></em> is set to one,
                        otherwise it is set to zero.
                    </p></dd></dl></div></div><div class="refsect1"><a id="errors"></a><h2>Errors</h2><p>
            <code class="constant">GL_INVALID_ENUM</code> is generated if <em class="parameter"><code>target</code></em> is not one of the accepted
            framebuffer targets.
        </p><p>
            <code class="constant">GL_INVALID_ENUM</code> is generated if <em class="parameter"><code>pname</code></em> is not one of the accepted
            parameter names.
        </p><p>
            <code class="constant">GL_INVALID_OPERATION</code> is generated if the default framebuffer is bound to <em class="parameter"><code>target</code></em>.
        </p><p>
            <em class="parameter"><code>params</code></em> should be the address of a variable to which the client has write access otherwise
            undefined behavior, including process termination may occur.
        </p></div><div class="refsect1"><a id="associatedgets"></a><h2>Associated Gets</h2><p>
            <a class="citerefentry" href="glGetFramebufferParameteriv.xml"><span class="citerefentry"><span class="refentrytitle">glGetFramebufferParameteriv</span></span></a>.
        </p></div><div class="refsect1"><a id="seealso"></a><h2>See Also</h2><p>
            <a class="citerefentry" href="glFramebufferParameteri.xml"><span class="citerefentry"><span class="refentrytitle">glFramebufferParameteri</span></span></a>.
        </p></div><div class="refsect1"><a id="Copyright"></a><h2>Copyright</h2><p>
            Copyright <span class="trademark"></span>© 2013 Khronos Group.
            This material may be distributed subject to the terms and conditions set forth in
            the Open Publication License, v 1.0, 8 June 1999.
            <a class="ulink" href="http://opencontent.org/openpub/" target="_top">http://opencontent.org/openpub/</a>.
        </p></div></div></body></html>
