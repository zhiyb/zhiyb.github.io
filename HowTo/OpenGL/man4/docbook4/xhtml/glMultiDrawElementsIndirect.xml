<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "xhtml1-transitional.dtd">
<?xml-stylesheet type="text/xsl" href="mathml.xsl"?><html xmlns="http://www.w3.org/1999/xhtml" xmlns:pref="http://www.w3.org/2002/Math/preference" pref:renderer="mathplayer-dl"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /><link rel="stylesheet" type="text/css" href="opengl-man.css" /><title>glMultiDrawElementsIndirect - OpenGL 4 Reference Pages</title><meta name="generator" content="DocBook XSL Stylesheets V1.78.1" /></head><body><div class="refentry"><a id="glMultiDrawElementsIndirect"></a><div class="titlepage"></div><div class="refnamediv"><h2>Name</h2><p>glMultiDrawElementsIndirect — render indexed primitives from array data, taking parameters from memory</p></div><div class="refsynopsisdiv"><h2>C Specification</h2><div class="funcsynopsis"><table border="0" class="funcprototype-table" summary="Function synopsis" style="cellspacing: 0; cellpadding: 0;"><tr><td><code class="funcdef">void <strong class="fsfunc">glMultiDrawElementsIndirect</strong>(</code></td><td>GLenum <var class="pdparam">mode</var>, </td></tr><tr><td> </td><td>GLenum <var class="pdparam">type</var>, </td></tr><tr><td> </td><td>const void *<var class="pdparam">indirect</var>, </td></tr><tr><td> </td><td>GLsizei <var class="pdparam">drawcount</var>, </td></tr><tr><td> </td><td>GLsizei <var class="pdparam">stride</var><code>)</code>;</td></tr></table><div class="funcprototype-spacer"> </div></div></div><div class="refsect1"><a id="parameters"></a><h2>Parameters</h2><div class="variablelist"><dl class="variablelist"><dt><span class="term"><em class="parameter"><code>mode</code></em></span></dt><dd><p>
                    Specifies what kind of primitives to render.
                    Symbolic constants
                    <code class="constant">GL_POINTS</code>,
                    <code class="constant">GL_LINE_STRIP</code>,
                    <code class="constant">GL_LINE_LOOP</code>,
                    <code class="constant">GL_LINES</code>,
                    <code class="constant">GL_LINE_STRIP_ADJACENCY</code>,
                    <code class="constant">GL_LINES_ADJACENCY</code>,
                    <code class="constant">GL_TRIANGLE_STRIP</code>,
                    <code class="constant">GL_TRIANGLE_FAN</code>,
                    <code class="constant">GL_TRIANGLES</code>,
                    <code class="constant">GL_TRIANGLE_STRIP_ADJACENCY</code>,
                    <code class="constant">GL_TRIANGLES_ADJACENCY</code>, and
                    <code class="constant">GL_PATCHES</code>
                    are accepted.
                </p></dd><dt><span class="term"><em class="parameter"><code>type</code></em></span></dt><dd><p>
                    Specifies the type of data in the buffer bound to the <code class="constant">GL_ELEMENT_ARRAY_BUFFER</code> binding.
                </p></dd><dt><span class="term"><em class="parameter"><code>indirect</code></em></span></dt><dd><p>
                    Specifies the address of a structure containing an array of draw parameters.
                </p></dd><dt><span class="term"><em class="parameter"><code>drawcount</code></em></span></dt><dd><p>
                    Specifies the number of elements in the array addressed by <em class="parameter"><code>indirect</code></em>.
                </p></dd><dt><span class="term"><em class="parameter"><code>stride</code></em></span></dt><dd><p>
                    Specifies the distance in basic machine units between elements of the draw parameter array.
                </p></dd></dl></div></div><div class="refsect1"><a id="description"></a><h2>Description</h2><p>
            <code class="function">glMultiDrawElementsIndirect</code> specifies multiple indexed geometric primitives
            with very few subroutine calls. <code class="function">glMultiDrawElementsIndirect</code> behaves
            similarly to a multitude of calls to <a class="citerefentry" href="glDrawElementsInstancedBaseVertexBaseInstance.xml"><span class="citerefentry"><span class="refentrytitle">glDrawElementsInstancedBaseVertexBaseInstance</span></span></a>,
            execpt that the parameters to <a class="citerefentry" href="glDrawElementsInstancedBaseVertexBaseInstance.xml"><span class="citerefentry"><span class="refentrytitle">glDrawElementsInstancedBaseVertexBaseInstance</span></span></a>
            are stored in an array in memory at the address given by <em class="parameter"><code>indirect</code></em>, separated
            by the stride, in basic machine units, specified by <em class="parameter"><code>stride</code></em>. If <em class="parameter"><code>stride</code></em>
            is zero, then the array is assumed to be tightly packed in memory.
        </p><p>
            The parameters addressed by <em class="parameter"><code>indirect</code></em> are packed into a structure
            that takes the form (in C):
            </p><pre class="programlisting">    typedef  struct {
        uint  count;
        uint  instanceCount;
        uint  firstIndex;
        uint  baseVertex;
        uint  baseInstance;
    } DrawElementsIndirectCommand;</pre><p>
        </p><p>
            A single call to <code class="function">glMultiDrawElementsIndirect</code> is equivalent, assuming no errors
            are generated to:
            </p><pre class="programlisting">    GLsizei n;
    for (n = 0; n &lt; drawcount; n++) {
        const DrawElementsIndirectCommand *cmd;
        if (stride != 0) {
            cmd = (const DrawElementsIndirectCommand  *)((uintptr)indirect + n * stride);
        } else {
            cmd = (const DrawElementsIndirectCommand  *)indirect + n;
        }

        glDrawElementsInstancedBaseVertexBaseInstance(mode,
                                                      cmd-&gt;count,
                                                      type,
                                                      cmd-&gt;firstIndex + size-of-type,
                                                      cmd-&gt;instanceCount,
                                                      cmd-&gt;baseVertex,
                                                      cmd-&gt;baseInstance);
    }</pre><p>
        </p><p>
            If a buffer is bound to the <code class="constant">GL_DRAW_INDIRECT_BUFFER</code> binding at the time
            of a call to <code class="function">glDrawElementsIndirect</code>, <em class="parameter"><code>indirect</code></em>
            is interpreted as an offset, in basic machine units, into that buffer and the parameter
            data is read from the buffer rather than from client memory.
        </p><p>
            Note that indices stored in client memory are not supported. If no buffer is bound to the
            <code class="constant">GL_ELEMENT_ARRAY_BUFFER</code> binding, an error will be generated.
        </p><p>
            The results of the operation are undefined if the <code class="code">reservedMustBeZero</code> member
            of the parameter structure is non-zero. However, no error is generated in this case.
        </p><p>
            Vertex attributes that are modified by <code class="function">glDrawElementsIndirect</code> have an
            unspecified value after <code class="function">glDrawElementsIndirect</code> returns. Attributes that aren't
            modified remain well defined.
        </p></div><div class="refsect1"><a id="notes"></a><h2>Notes</h2><p>
            The <em class="parameter"><code>baseInstance</code></em> member of the <em class="parameter"><code>DrawElementsIndirectCommand</code></em>
            structure is defined only if the GL version is 4.2 or greater. For versions of the GL less than 4.2,
            this parameter is present but is reserved and should be set to zero. On earlier versions of the GL,
            behavior is undefined if it is non-zero.
        </p></div><div class="refsect1"><a id="errors"></a><h2>Errors</h2><p>
            <code class="constant">GL_INVALID_ENUM</code> is generated if <em class="parameter"><code>mode</code></em> is not an accepted value.
        </p><p>
            <code class="constant">GL_INVALID_VALUE</code> is generated if <em class="parameter"><code>stride</code></em> is not a multiple
            of four.
        </p><p>
            <code class="constant">GL_INVALID_VALUE</code> is generated if <em class="parameter"><code>drawcount</code></em> is negative.
        </p><p>
            <code class="constant">GL_INVALID_OPERATION</code> is generated if no buffer is bound to the <code class="constant">GL_ELEMENT_ARRAY_BUFFER</code>
            binding, or if such a buffer's data store is currently mapped.
        </p><p>
            <code class="constant">GL_INVALID_OPERATION</code> is generated if a non-zero buffer object name is bound to an
            enabled array or to the <code class="constant">GL_DRAW_INDIRECT_BUFFER</code> binding and the buffer object's data store is currently mapped.
        </p><p>
            <code class="constant">GL_INVALID_OPERATION</code> is generated if a geometry shader is active and <em class="parameter"><code>mode</code></em>
            is incompatible with the input primitive type of the geometry shader in the currently installed program object.
        </p><p>
            <code class="constant">GL_INVALID_OPERATION</code> is generated if <em class="parameter"><code>mode</code></em> is <code class="constant">GL_PATCHES</code>
            and no tessellation control shader is active.
        </p></div><div class="refsect1"><a id="seealso"></a><h2>See Also</h2><p>
            <a class="citerefentry" href="glDrawArrays.xml"><span class="citerefentry"><span class="refentrytitle">glDrawArrays</span></span></a>,
            <a class="citerefentry" href="glDrawArraysInstanced.xml"><span class="citerefentry"><span class="refentrytitle">glDrawArraysInstanced</span></span></a>,
            <a class="citerefentry" href="glDrawArraysIndirect.xml"><span class="citerefentry"><span class="refentrytitle">glDrawArraysIndirect</span></span></a>,
            <a class="citerefentry" href="glDrawElements.xml"><span class="citerefentry"><span class="refentrytitle">glDrawElements</span></span></a>,
            <a class="citerefentry" href="glDrawRangeElements.xml"><span class="citerefentry"><span class="refentrytitle">glDrawRangeElements</span></span></a>,
            <a class="citerefentry" href="glDrawElementsIndirect.xml"><span class="citerefentry"><span class="refentrytitle">glDrawElementsIndirect</span></span></a>,
            <a class="citerefentry" href="glMultiDrawArraysIndirect.xml"><span class="citerefentry"><span class="refentrytitle">glMultiDrawArraysIndirect</span></span></a>
        </p></div><div class="refsect1"><a id="Copyright"></a><h2>Copyright</h2><p>
            Copyright <span class="trademark"></span>© 2010-2013 Khronos Group.
            This material may be distributed subject to the terms and conditions set forth in
            the Open Publication License, v 1.0, 8 June 1999.
            <a class="ulink" href="http://opencontent.org/openpub/" target="_top">http://opencontent.org/openpub/</a>.
        </p></div></div></body></html>
